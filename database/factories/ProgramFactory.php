<?php

/* @var $factory \Illuminate\Database\Eloquent\Factory */

use Carbon\Carbon;
use Faker\Generator as Faker;
use App\Contributor;
use App\Meeting;
use App\Organization;
use App\Program;
use App\Site;

$factory->define(Program::class, function (Faker $faker) {
    return [
        //
        'name' => 'Factory Program',

        'description' => 'This is a program generated by a factory.',

        'public_notes' => 'Dem pubnotez',

        'contributor_notes' => 'Controtes',

        'ages_type' => 'grades',

        'min_age' => '5',

        'max_age' =>  '7',

    ];
});

$factory->afterCreatingState(Program::class, 'amCamp', function (Program $program, Faker $faker) {
    $site = factory(Site::class)->create();

    $organization = factory(Organization::class)->create();

    $startDatetime = Carbon::parse('9am +2 weeks');

    $meetings = collect([]);

    for ($m = 1; $m <= 5; $m++) {
        $meeting = Meeting::make([

            'start_datetime' => $startDatetime,

            'end_datetime' => Carbon::parse($startDatetime.' +3 hours'),

            'site_id' => $site->id,

        ]);

        $meeting['program_id'] = $program->id;

        $meeting->save();

        $meetings->push($meeting);

        $startDatetime = Carbon::parse($startDatetime.' +1 day');
    }

    $program->meetings()->saveMany($meetings);

    $contributor = Contributor::make([

        'invoice_amount' => 1300,

        'invoice_type' => 'per participant',

        'internal_name' => 'Intername',

    ]);

    $contributor['organization_id'] = $organization->id;

    $contributor['program_id'] = $program->id;

    $contributor->save();
});
